// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Prisma 스키마 파일입니다. 
// 더 자세한 정보는 위 링크에서 확인할 수 있습니다.

generator client {
  provider = "prisma-client-js"
}

// Prisma 클라이언트 코드 생성을 위한 generator 블록입니다.
// "prisma-client-js" 프로바이더를 사용하여 JavaScript로 작성된 Prisma 클라이언트 코드를 생성합니다.

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// 데이터베이스 연결 정보를 설정하는 datasource 블록입니다.
// MongoDB를 데이터베이스 프로바이더로 사용하고, DATABASE_URL 환경 변수를 통해 연결 정보를 가져옵니다.

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])
  
  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  friendshipsA Friendship[] @relation("UserAFriends")
  friendshipsB Friendship[] @relation("UserBFriends")

  accounts Account[]
  messages Message[]
}

// "User" 모델을 정의합니다. 사용자 정보를 저장하는 모델입니다.
// 각 필드의 의미와 데이터베이스 매핑 등이 상세히 주석으로 설명되어 있습니다.

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId // 사용자 ID와 연결
  type               String               // 계정 유형
  provider           String               // 제공자 (예: Google, Facebook)
  providerAccountId  String               // 제공자에서 부여하는 계정 ID
  refresh_token      String?  @db.String   // 새로 고침 토큰
  refresh_token_expires_in Int?         // refresh_token_expires_in 필드 추가
  access_token       String?  @db.String   // 엑세스 토큰
  expires_at         Int?                 // 토큰 만료 시간
  token_type         String?              // 토큰 유형
  scope              String?              // 스코프 정보
  id_token           String?  @db.String   // ID 토큰
  session_state      String?              // 세션 상태

  // 사용자와의 관계 설정
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // provider와 providerAccountId 조합이 고유해야 함
  @@unique([provider, providerAccountId])


}

// "Account" 모델을 정의합니다. 사용자의 연결된 계정 정보를 저장하는 모델입니다.
// 각 필드의 의미와 관계, 유니크 제약 조건 등이 상세히 주석으로 설명되어 있습니다.

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  
  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Friendship {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userAId   String @db.ObjectId
  userBId   String @db.ObjectId

  userA     User @relation("UserAFriends", fields: [userAId], references: [id])
  userB     User @relation("UserBFriends", fields: [userBId], references: [id])


  @@unique([userAId, userBId])
}